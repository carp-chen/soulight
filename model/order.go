package model

import (
	"database/sql"
	"errors"
	"time"

	"github.com/didi/gendry/builder"
	"github.com/didi/gendry/scanner"
)

/*
   This code is generated by gendry
*/

// Order is a mapping object for order table in mysql
type Order struct {
	ID           int       `json:"id"`
	OrderID      string    `json:"order_id"`
	UserID       int       `json:"user_id"`
	AdviserID    int       `json:"adviser_id"`
	Situation    string    `json:"situation"`
	Question     string    `json:"question"`
	Cost         int       `json:"cost"`
	Status       int8      `json:"status"`
	ServiceType  int8      `json:"service_type"`
	OrderTime    time.Time `json:"order_time"`
	DeliveryTime time.Time `json:"delivery_time"`
}

type OrderList struct {
	OrderID   string    `json:"order_id"`
	Img       string    `json:"img"`
	UserName  string    `json:"username"`
	Status    int8      `json:"status"`
	Question  string    `json:"question"`
	OrderTime time.Time `json:"order_time"`
}

type OrderInfo struct {
	OrderID      string    `json:"order_id"`
	Status       int8      `json:"status"`
	ServiceType  int8      `json:"service_type"`
	OrderTime    time.Time `json:"order_time"`
	DeliveryTime time.Time `json:"delivery_time"`
	UserName     string    `json:"username"`
	Birth        string    `json:"birth"`
	Gender       string    `json:"gender"`
	Situation    string    `json:"situation"`
	Question     string    `json:"question"`
}

//GetOne gets one record from table order by condition "where"
func GetOneOrder(db *sql.DB, where map[string]interface{}) (*Order, error) {
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("orders", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res *Order
	err = scanner.Scan(row, &res)
	return res, err
}

//GetMulti gets multiple records from table order by condition "where"
func GetMultiOrder(db *sql.DB, where map[string]interface{}) ([]*Order, error) {
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("orders", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res []*Order
	err = scanner.Scan(row, &res)
	return res, err
}

//Insert inserts an array of data into table order
func InsertOrder(db *sql.DB, data []map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildInsert("orders", data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err || nil == result {
		return 0, err
	}
	return result.LastInsertId()
}

//Update updates the table order
func UpdateOrder(db *sql.DB, where, data map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildUpdate("orders", where, data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}

// Delete deletes matched records in order
func DeleteOrder(db *sql.DB, where, data map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildDelete("orders", where)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}
