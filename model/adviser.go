package model

import (
	"database/sql"
	"errors"
	"time"

	"github.com/didi/gendry/builder"
	"github.com/didi/gendry/scanner"
)

/*
   This code is generated by gendry
*/

// Adviser is a mapping object for adviser table in mysql
type Adviser struct {
	ID          int       `json:"id"`
	AdviserName string    `json:"adviser_name" validate:"required,min=4,max=20" label:"用户名"`
	Password    string    `json:"password" validate:"required,min=6,max=30" label:"密码"`
	Img         string    `json:"img"`
	Bio         string    `json:"bio"`
	WorkExp     string    `json:"work_exp"`
	About       string    `json:"about"`
	Rate        float64   `json:"rate"`
	Coins       int       `json:"coins"`
	Readings    int       `json:"readings"`
	Response    float64   `json:"response"`
	Ontime      float64   `json:"ontime"`
	Accuracy    float64   `json:"accuracy"`
	Status      int8      `json:"status"`
	CreatedAt   time.Time `json:"created_at"`
	UpdateAt    time.Time `json:"update_at"`
}

type EditAdviser struct {
	AdviserName string `json:"adviser_name" binding:"required"`
	Img         string `json:"img"`
	Bio         string `json:"bio"`
	WorkExp     string `json:"work_exp" binding:"required"`
	About       string `json:"about"`
}
type AdviserList struct {
	AdviserName string `json:"adviser_name"`
	Img         string `json:"img"`
	Bio         string `json:"bio"`
}
type AdviserInfo struct {
	AdviserName string  `json:"adviser_name"`
	Img         string  `json:"img"`
	Bio         string  `json:"bio"`
	Rate        float64 `json:"rate"`
	Coins       int     `json:"coins"`
	Readings    int     `json:"readings"`
	Response    float64 `json:"response"`
	Ontime      float64 `json:"ontime"`
	Accuracy    float64 `json:"accuracy"`
	Status      int8    `json:"status"`
}

type AdviserStatus struct {
	Status int8 `json:"status"`
}

//GetOne gets one record from table adviser by condition "where"
func GetOneAdviser(db *sql.DB, where map[string]interface{}) (*Adviser, error) {
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("adviser", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res *Adviser
	err = scanner.Scan(row, &res)
	return res, err
}

//GetMulti gets multiple records from table adviser by condition "where"
func GetMultiAdviser(db *sql.DB, where map[string]interface{}) ([]*Adviser, error) {
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("adviser", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res []*Adviser
	err = scanner.Scan(row, &res)
	return res, err
}

//Insert inserts an array of data into table adviser
func InsertAdviser(db *sql.DB, data []map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildInsert("adviser", data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err || nil == result {
		return 0, err
	}
	return result.LastInsertId()
}

//Update updates the table adviser
func UpdateAdviser(db *sql.DB, where, data map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildUpdate("adviser", where, data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}

// Delete deletes matched records in adviser
func DeleteAdviser(db *sql.DB, where, data map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildDelete("adviser", where)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}
