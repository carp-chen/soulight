package model

import (
	"database/sql"
	"time"

	"github.com/didi/gendry/scanner"
)

/*
This code is generated by gendry
*/

// Transaction is a mapping object for transaction table in mysql
type Transaction struct {
	ID          int       `json:"id"`
	OrderID     string    `json:"order_id"`
	ServiceType int8      `json:"service_type"`
	Action      int8      `json:"action"`
	Credits     int       `json:"credits"`
	CreateTime  time.Time `json:"create_time"`
}

//action_user: 0.充值 1:下单 2:订单过期退款 3:加急  4:加急退款  5.订单打赏
//action_adviser: 0.充值 1:完成订单 2:完成加急订单 3:收到打赏

//TODO
func AdddTransaction(conn *sql.Tx, order Order) error {
	var action int
	switch order.Status {
	case 0:
		action = 1
	case 1:
		action = 5
	case 3:
		action = 3
	}
	if action == 1 {
		if _, err := conn.Exec("update user set coins=coins-? where id=?", order.Cost, order.UserID); err != nil {
			conn.Rollback()
			return err
		}
		if _, err := conn.Exec(`insert into transaction(id,order_id,action,credits) 
	    values(?,?,?,?,?)`, 0, order.UserID, order.OrderID, order.ServiceType, action, order.Cost); err != nil {
			conn.Rollback()
			return err
		}
	}

	return err
}

func GetTransactionsForUser(id int) ([]*Transaction, error) {
	rows, err := Db.Query("select * from transaction where identity=? and user_id=?", 0, id)
	if nil != err || nil == rows {
		return nil, err
	}
	defer rows.Close()
	var res []*Transaction
	err = scanner.Scan(rows, &res)
	return res, err
}

func GetTransactionsForAdviser(id int) ([]*Transaction, error) {
	rows, err := Db.Query("select * from transaction where identity=? and user_id=?", 1, id)
	if nil != err || nil == rows {
		return nil, err
	}
	defer rows.Close()
	var res []*Transaction
	err = scanner.Scan(rows, &res)
	return res, err
}
