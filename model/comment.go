package model

import (
	"database/sql"
	"errors"
	"time"

	"github.com/didi/gendry/builder"
	"github.com/didi/gendry/scanner"
)

/*
This code is generated by gendry
*/

// Comment is a mapping object for comment table in mysql
type Comment struct {
	OrderID    string    `json:"order_id"`
	Content    string    `json:"content"`
	Reply      string    `json:"reply"`
	CreateTime time.Time `json:"create_time"`
	ReplyTime  time.Time `json:"reply_time"`
}
type Review struct {
	OrderID string  `json:"order_id"`
	Rate    float64 `json:"rate"`
	Content string  `json:"content"`
}
type Reward struct {
	OrderID string `json:"order_id"`
	Reward  int    `json:"reward"`
}

//GetOne gets one record from table comment by condition "where"
func GetOneComment(db *sql.DB, where map[string]interface{}) (*Comment, error) {
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("comment", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res *Comment
	err = scanner.Scan(row, &res)
	return res, err
}

//GetMulti gets multiple records from table comment by condition "where"
func GetMultiComment(db *sql.DB, where map[string]interface{}) ([]*Comment, error) {
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("comment", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res []*Comment
	err = scanner.Scan(row, &res)
	return res, err
}

//Insert inserts an array of data into table comment
func InsertComment(db *sql.DB, data []map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildInsert("comment", data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err || nil == result {
		return 0, err
	}
	return result.LastInsertId()
}

//Update updates the table comment
func UpdateComment(db *sql.DB, where, data map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildUpdate("comment", where, data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}

// Delete deletes matched records in comment
func DeleteComment(db *sql.DB, where, data map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildDelete("comment", where)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}
