package model

import (
	"database/sql"
	"errors"

	"github.com/didi/gendry/builder"
	"github.com/didi/gendry/scanner"
)

/*
This code is generated by gendry
*/

// Service is a mapping object for service table in mysql
type Service struct {
	ID        int  `json:"id"`
	Type      int8 `json:"type"`
	Status    int8 `json:"status"`
	Cost      int  `json:"cost"`
	AdviserID int  `json:"adviser_id"`
}

type EditService struct {
	Type   int8 `json:"type"`
	Status int8 `json:"status"`
	Cost   int  `json:"cost"`
}

//GetOne gets one record from table service by condition "where"
func GetOneService(db *sql.DB, where map[string]interface{}) (*Service, error) {
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("service", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res *Service
	err = scanner.Scan(row, &res)
	return res, err
}

//GetMulti gets multiple records from table service by condition "where"
func GetMultiService(db *sql.DB, where map[string]interface{}) ([]*Service, error) {
	if nil == db {
		return nil, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildSelect("service", where, nil)
	if nil != err {
		return nil, err
	}
	row, err := db.Query(cond, vals...)
	if nil != err || nil == row {
		return nil, err
	}
	defer row.Close()
	var res []*Service
	err = scanner.Scan(row, &res)
	return res, err
}

//Insert inserts an array of data into table service
func InsertService(db *sql.DB, data []map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildInsert("service", data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err || nil == result {
		return 0, err
	}
	return result.LastInsertId()
}

//Update updates the table service
func UpdateService(db *sql.DB, where, data map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildUpdate("service", where, data)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}

// Delete deletes matched records in service
func DeleteService(db *sql.DB, where, data map[string]interface{}) (int64, error) {
	if nil == db {
		return 0, errors.New("sql.DB object couldn't be nil")
	}
	cond, vals, err := builder.BuildDelete("service", where)
	if nil != err {
		return 0, err
	}
	result, err := db.Exec(cond, vals...)
	if nil != err {
		return 0, err
	}
	return result.RowsAffected()
}
